{"version":3,"sources":["GoodsList.tsx","api/goods.ts","App.tsx","index.tsx"],"names":["GoodsList","React","memo","goods","ListGroup","className","map","good","Item","style","color","name","id","getAll","fetch","then","response","ok","headers","get","includes","json","Promise","reject","Error","status","statusText","get5First","sort","good1","good2","localeCompare","slice","getRedGoods","filter","App","useState","setGoods","isLoading","setIsLoading","hasError","setHasError","handleGoodsLoading","useCallback","getGoods","a","catch","finally","goodsFromServer","Button","type","variant","onClick","disabled","Spinner","animation","role","ReactDOM","render","document","getElementById"],"mappings":"yRASaA,EAA6BC,IAAMC,MAAK,gBAAGC,EAAH,EAAGA,MAAH,OACnD,cAACC,EAAA,EAAD,CAAWC,UAAU,gBAArB,SACGF,EAAMG,KAAI,SAAAC,GAAI,OACb,cAACH,EAAA,EAAUI,KAAX,CAEE,UAAQ,OACRC,MAAO,CACLC,MAAOH,EAAKG,OAEdL,UAAU,sBANZ,SAQGE,EAAKI,MAPDJ,EAAKK,GAFC,KAFkC,I,QCJ9C,SAASC,IACd,OAAOC,MAHI,yEAIRC,MAAK,SAAAC,GAAa,IAAD,EAChB,OAAKA,EAASC,GAMV,UAACD,EAASE,QAAQC,IAAI,uBAAtB,OAAC,EAAsCC,SAAS,oBAI7CJ,EAASK,OAHPC,QAAQC,OAAO,IAAIC,MAAM,kCANzBF,QAAQC,OACb,IAAIC,MAAJ,UAAaR,EAASS,OAAtB,cAAkCT,EAASU,aAShD,GACJ,CAEM,IAAMC,EAAY,WACvB,OAAOd,IACJE,MAAK,SAAAZ,GAAK,OACT,YAAIA,GACDyB,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAMlB,KAAKoB,cAAcD,EAAMnB,KAAjD,IACPqB,MAAM,EAAG,EAHD,GAId,EAEYC,EAAc,WACzB,OAAOpB,IACJE,MAAK,SAAAZ,GAAK,OAAIA,EAAM+B,QAAO,SAAA3B,GAAI,MAAmB,QAAfA,EAAKG,KAAT,GAArB,GACd,ECtBYyB,EAAgB,WAC3B,MAA0BC,mBAAiB,IAA3C,mBAAOjC,EAAP,KAAckC,EAAd,KACA,EAAkCD,oBAAS,GAA3C,mBAAOE,EAAP,KAAkBC,EAAlB,KACA,EAAgCH,oBAAS,GAAzC,mBAAOI,EAAP,KAAiBC,EAAjB,KAEMC,EAAqBC,sBAAW,uCACpC,WACEC,GADF,eAAAC,EAAA,6DAGEJ,GAAY,GACZF,GAAa,GAJf,SAMgCK,IAC3BE,OAAM,WACLL,GAAY,EACb,IACAM,SAAQ,kBAAMR,GAAa,EAAnB,IAVb,OAMQS,EANR,OAYEX,EAASW,GAAmB,IAZ9B,2CADoC,sDAepC,IAGF,OACE,sBAAK3C,UAAU,MAAf,UACE,sBAAKA,UAAU,SAAf,UACE,oBAAIA,UAAU,cAAd,mCAEA,sBAAKA,UAAU,oBAAf,UACE,cAAC4C,EAAA,EAAD,CACEC,KAAK,SACL,UAAQ,aACRC,QAAQ,OACR9C,UAAU,cACV+C,QAAS,kBAAMV,EAAmB7B,EAAzB,EACTwC,SAAUf,EANZ,4BAWA,cAACW,EAAA,EAAD,CACEC,KAAK,SACL,UAAQ,oBACRC,QAAQ,UACR9C,UAAU,cACV+C,QAAS,kBAAMV,EAAmBf,EAAzB,EACT0B,SAAUf,EANZ,gCAWA,cAACW,EAAA,EAAD,CACEC,KAAK,SACL,UAAQ,aACRC,QAAQ,SACR9C,UAAU,cACV+C,QAAS,kBAAMV,EAAmBT,EAAzB,EACToB,SAAUf,EANZ,kCAcFE,GAEI,gEAILF,EACG,cAACgB,EAAA,EAAD,CAASC,UAAU,SAASC,KAAK,WACjC,cAACxD,EAAD,CAAWG,MAAOA,MAG3B,ECpFDsD,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,Q","file":"static/js/main.99638774.chunk.js","sourcesContent":["import React from 'react';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport { Good } from './types/Good';\nimport './App.scss';\n\ntype Props = {\n  goods: Good[]\n};\n\nexport const GoodsList: React.FC<Props> = React.memo(({ goods }) => (\n  <ListGroup className=\"list-of-goods\">\n    {goods.map(good => (\n      <ListGroup.Item\n        key={good.id}\n        data-cy=\"good\"\n        style={{\n          color: good.color,\n        }}\n        className=\"list-of-goods__item\"\n      >\n        {good.name}\n      </ListGroup.Item>\n    ))}\n  </ListGroup>\n));\n","import { Good } from '../types/Good';\n\n// eslint-disable-next-line\nconst API_URL = `https://mate-academy.github.io/react_dynamic-list-of-goods/goods.json`;\n\nexport function getAll(): Promise<Good[]> {\n  return fetch(API_URL)\n    .then(response => {\n      if (!response.ok) {\n        return Promise.reject(\n          new Error(`${response.status} - ${response.statusText}`),\n        );\n      }\n\n      if (!response.headers.get('content-type')?.includes('application/json')) {\n        return Promise.reject(new Error('Content-type is not supported'));\n      }\n\n      return response.json();\n    });\n}\n\nexport const get5First = () => {\n  return getAll()\n    .then(goods => (\n      [...goods]\n        .sort((good1, good2) => good1.name.localeCompare(good2.name)))\n      .slice(0, 5));\n};\n\nexport const getRedGoods = () => {\n  return getAll()\n    .then(goods => goods.filter(good => good.color === 'red'));\n};\n","import React, { useCallback, useState } from 'react';\n\nimport Button from 'react-bootstrap/Button';\nimport Spinner from 'react-bootstrap/Spinner';\n\nimport './App.scss';\nimport { GoodsList } from './GoodsList';\nimport { Good } from './types/Good';\n\nimport { getAll, get5First, getRedGoods } from './api/goods';\n\nexport const App: React.FC = () => {\n  const [goods, setGoods] = useState<Good[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasError, setHasError] = useState(false);\n\n  const handleGoodsLoading = useCallback(\n    async (\n      getGoods: () => Promise<Good[]>,\n    ) => {\n      setHasError(false);\n      setIsLoading(true);\n\n      const goodsFromServer = await getGoods()\n        .catch(() => {\n          setHasError(true);\n        })\n        .finally(() => setIsLoading(false));\n\n      setGoods(goodsFromServer || []);\n    },\n    [],\n  );\n\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n        <h1 className=\"page-header\">Dynamic list of Goods</h1>\n\n        <div className=\"buttons-container\">\n          <Button\n            type=\"button\"\n            data-cy=\"all-button\"\n            variant=\"info\"\n            className=\"load-button\"\n            onClick={() => handleGoodsLoading(getAll)}\n            disabled={isLoading}\n          >\n            Load all goods\n          </Button>\n\n          <Button\n            type=\"button\"\n            data-cy=\"first-five-button\"\n            variant=\"success\"\n            className=\"load-button\"\n            onClick={() => handleGoodsLoading(get5First)}\n            disabled={isLoading}\n          >\n            Load 5 first goods\n          </Button>\n\n          <Button\n            type=\"button\"\n            data-cy=\"red-button\"\n            variant=\"danger\"\n            className=\"load-button\"\n            onClick={() => handleGoodsLoading(getRedGoods)}\n            disabled={isLoading}\n          >\n            Load red goods\n          </Button>\n        </div>\n      </div>\n\n      {\n        hasError\n          && (\n            <h3>Error occured when data loaded</h3>\n          )\n      }\n\n      {isLoading\n        ? <Spinner animation=\"border\" role=\"status\" />\n        : <GoodsList goods={goods} />}\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}