{"version":3,"sources":["types/ButtonsNames.ts","GoodsList.tsx","api/goods.ts","App.tsx","index.tsx"],"names":["ButtonsNames","GoodsList","React","memo","goods","length","ListGroup","className","map","good","Item","style","color","name","id","getAll","fetch","then","response","ok","headers","get","includes","json","Promise","reject","Error","status","statusText","get5First","sort","good1","good2","localeCompare","slice","getRedGoods","filter","App","useState","setGoods","isLoading","setIsLoading","hasError","setHasError","NONE","lastButton","setLastButton","handleGoodsLoading","useCallback","getGoods","buttonName","catch","finally","Button","type","variant","onClick","ALL","disabled","FIRST5","RED","Spinner","animation","role","ReactDOM","render","document","getElementById"],"mappings":"iLAAYA,E,+ECSCC,EAA6BC,IAAMC,MAAK,YAAgB,IAAbC,EAAY,EAAZA,MACtD,OAAwB,IAAjBA,EAAMC,OAET,cAACC,EAAA,EAAD,CAAWC,UAAU,gBAArB,SACGH,EAAMI,KAAI,SAAAC,GAAI,OACb,cAACH,EAAA,EAAUI,KAAX,CAEE,UAAQ,OACRC,MAAO,CACLC,MAAOH,EAAKG,OAEdL,UAAU,sBANZ,SAQGE,EAAKI,MAPDJ,EAAKK,GAFC,MAejB,2DAEL,K,SD9BWd,K,QAAAA,E,UAAAA,E,oBAAAA,E,iBAAAA,M,iBEKL,SAASe,IACd,OAAOC,MAHI,yEAIRC,MAAK,SAAAC,GAAa,IAAD,EAChB,OAAKA,EAASC,GAMV,UAACD,EAASE,QAAQC,IAAI,uBAAtB,OAAC,EAAsCC,SAAS,oBAI7CJ,EAASK,OAHPC,QAAQC,OAAO,IAAIC,MAAM,kCANzBF,QAAQC,OACb,IAAIC,MAAJ,UAAaR,EAASS,OAAtB,cAAkCT,EAASU,aAShD,GACJ,CAEM,IAAMC,EAAY,WACvB,OAAOd,IACJE,MAAK,SAAAb,GAAK,OACT,YAAIA,GACD0B,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAMlB,KAAKoB,cAAcD,EAAMnB,KAAjD,IACPqB,MAAM,EAAG,EAHD,GAId,EAEYC,EAAc,WACzB,OAAOpB,IACJE,MAAK,SAAAb,GAAK,OAAIA,EAAMgC,QAAO,SAAA3B,GAAI,MAAmB,QAAfA,EAAKG,KAAT,GAArB,GACd,ECpBYyB,EAAgB,WAC3B,MAA0BC,mBAAiB,IAA3C,mBAAOlC,EAAP,KAAcmC,EAAd,KACA,EAAkCD,oBAAS,GAA3C,mBAAOE,EAAP,KAAkBC,EAAlB,KACA,EAAgCH,oBAAS,GAAzC,mBAAOI,EAAP,KAAiBC,EAAjB,KACA,EAAoCL,mBAAStC,EAAa4C,MAA1D,mBAAOC,EAAP,KAAmBC,EAAnB,KAEMC,EAAqBC,uBACzB,SACEC,EACAC,GAEIA,IAAeL,IAInBF,GAAY,GACZF,GAAa,GACbK,EAAcI,GAEdD,IACGhC,KAAKsB,GACLY,OAAM,WACLL,EAAc9C,EAAa4C,MAC3BD,GAAY,EACb,IACAS,SAAQ,kBAAMX,GAAa,EAAnB,IACZ,GACD,CAACI,IAGH,OACE,sBAAKtC,UAAU,MAAf,UACE,sBAAKA,UAAU,SAAf,UACE,oBAAIA,UAAU,cAAd,mCAEA,sBAAKA,UAAU,oBAAf,UACE,cAAC8C,EAAA,EAAD,CACEC,KAAK,SACL,UAAQ,aACRC,QAAQ,OACRhD,UAAU,cACViD,QAAS,kBAAMT,EAAmBhC,EAAQf,EAAayD,IAA9C,EACTC,SAAUlB,EANZ,4BAWA,cAACa,EAAA,EAAD,CACEC,KAAK,SACL,UAAQ,oBACRC,QAAQ,UACRhD,UAAU,cACViD,QAAS,kBAAMT,EAAmBlB,EAAW7B,EAAa2D,OAAjD,EACTD,SAAUlB,EANZ,gCAWA,cAACa,EAAA,EAAD,CACEC,KAAK,SACL,UAAQ,aACRC,QAAQ,SACRhD,UAAU,cACViD,QAAS,kBAAMT,EAAmBZ,EAAanC,EAAa4D,IAAnD,EACTF,SAAUlB,EANZ,kCAaHE,GACC,iEAGAA,IAAaF,EACX,cAACqB,EAAA,EAAD,CAASC,UAAU,SAASC,KAAK,WACjC,cAAC9D,EAAD,CAAWG,MAAOA,OAG3B,EC1FD4D,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,Q","file":"static/js/main.edc6d8ad.chunk.js","sourcesContent":["export enum ButtonsNames {\n  NONE = '',\n  ALL = 'all',\n  FIRST5 = 'first-five',\n  RED = 'red-goods',\n}\n","import React from 'react';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport { Good } from './types/Good';\nimport './App.scss';\n\ntype Props = {\n  goods: Good[]\n};\n\nexport const GoodsList: React.FC<Props> = React.memo(({ goods }) => {\n  return goods.length !== 0\n    ? (\n      <ListGroup className=\"list-of-goods\">\n        {goods.map(good => (\n          <ListGroup.Item\n            key={good.id}\n            data-cy=\"good\"\n            style={{\n              color: good.color,\n            }}\n            className=\"list-of-goods__item\"\n          >\n            {good.name}\n          </ListGroup.Item>\n        ))}\n      </ListGroup>\n    )\n    : (\n      <h3>The list of goods is empty</h3>\n    );\n});\n","import { Good } from '../types/Good';\n\n// eslint-disable-next-line\nconst API_URL = `https://mate-academy.github.io/react_dynamic-list-of-goods/goods.json`;\n\nexport function getAll(): Promise<Good[]> {\n  return fetch(API_URL)\n    .then(response => {\n      if (!response.ok) {\n        return Promise.reject(\n          new Error(`${response.status} - ${response.statusText}`),\n        );\n      }\n\n      if (!response.headers.get('content-type')?.includes('application/json')) {\n        return Promise.reject(new Error('Content-type is not supported'));\n      }\n\n      return response.json();\n    });\n}\n\nexport const get5First = () => {\n  return getAll()\n    .then(goods => (\n      [...goods]\n        .sort((good1, good2) => good1.name.localeCompare(good2.name)))\n      .slice(0, 5));\n};\n\nexport const getRedGoods = () => {\n  return getAll()\n    .then(goods => goods.filter(good => good.color === 'red'));\n};\n","import React, { useCallback, useState } from 'react';\n\nimport Button from 'react-bootstrap/Button';\nimport Spinner from 'react-bootstrap/Spinner';\n\nimport './App.scss';\nimport { GoodsList } from './GoodsList';\n\nimport { Good } from './types/Good';\nimport { ButtonsNames } from './types/ButtonsNames';\n\nimport { getAll, get5First, getRedGoods } from './api/goods';\n\nexport const App: React.FC = () => {\n  const [goods, setGoods] = useState<Good[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const [lastButton, setLastButton] = useState(ButtonsNames.NONE);\n\n  const handleGoodsLoading = useCallback(\n    (\n      getGoods: () => Promise<Good[]>,\n      buttonName: ButtonsNames,\n    ) => {\n      if (buttonName === lastButton) {\n        return;\n      }\n\n      setHasError(false);\n      setIsLoading(true);\n      setLastButton(buttonName);\n\n      getGoods()\n        .then(setGoods)\n        .catch(() => {\n          setLastButton(ButtonsNames.NONE);\n          setHasError(true);\n        })\n        .finally(() => setIsLoading(false));\n    },\n    [lastButton],\n  );\n\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n        <h1 className=\"page-header\">Dynamic list of Goods</h1>\n\n        <div className=\"buttons-container\">\n          <Button\n            type=\"button\"\n            data-cy=\"all-button\"\n            variant=\"info\"\n            className=\"load-button\"\n            onClick={() => handleGoodsLoading(getAll, ButtonsNames.ALL)}\n            disabled={isLoading}\n          >\n            Load all goods\n          </Button>\n\n          <Button\n            type=\"button\"\n            data-cy=\"first-five-button\"\n            variant=\"success\"\n            className=\"load-button\"\n            onClick={() => handleGoodsLoading(get5First, ButtonsNames.FIRST5)}\n            disabled={isLoading}\n          >\n            Load 5 first goods\n          </Button>\n\n          <Button\n            type=\"button\"\n            data-cy=\"red-button\"\n            variant=\"danger\"\n            className=\"load-button\"\n            onClick={() => handleGoodsLoading(getRedGoods, ButtonsNames.RED)}\n            disabled={isLoading}\n          >\n            Load red goods\n          </Button>\n        </div>\n      </div>\n\n      {hasError && (\n        <h3>Error occured when data loaded</h3>\n      )}\n\n      {!hasError && (isLoading\n        ? <Spinner animation=\"border\" role=\"status\" />\n        : <GoodsList goods={goods} />)}\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}